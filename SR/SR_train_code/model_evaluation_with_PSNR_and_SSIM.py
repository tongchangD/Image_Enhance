"""
通过计算PSNR 和SSIM评价模型,很多函数从BasicSR 中获取,文件中添加，主要是为了方便移动demo 计算
"""

import random
import os
import cv2
from glob import glob
import os
import cv2
import math
import numpy as np
from glob import glob
from torchvision.utils import make_grid
import os.path
import logging
import torch
from glob import glob
import cv2
# from utils import utils_logger
from utils import utils_image as util
# from utils import utils_model
from models.network_rrdbnet import RRDBNet as net
from tensorboardX import SummaryWriter


class Util():
    """
    图像的PSNR和SSIM计算
    """

    def __init__(self):
        pass

    def tensor2img(self, tensor, out_type=np.uint8, min_max=(0, 1)):
        '''
        Converts a torch Tensor into an image Numpy array
        Input: 4D(B,(3/1),H,W), 3D(C,H,W), or 2D(H,W), any range, RGB channel order
        Output: 3D(H,W,C) or 2D(H,W), [0,255], np.uint8 (default)
        '''
        tensor = tensor.squeeze().float().cpu().clamp_(*min_max)  # clamp
        tensor = (tensor - min_max[0]) / (min_max[1] - min_max[0])  # to range [0,1]
        n_dim = tensor.dim()
        if n_dim == 4:
            n_img = len(tensor)
            img_np = make_grid(tensor, nrow=int(math.sqrt(n_img)), normalize=False).numpy()
            img_np = np.transpose(img_np[[2, 1, 0], :, :], (1, 2, 0))  # HWC, BGR
        elif n_dim == 3:
            img_np = tensor.numpy()
            img_np = np.transpose(img_np[[2, 1, 0], :, :], (1, 2, 0))  # HWC, BGR
        elif n_dim == 2:
            img_np = tensor.numpy()
        else:
            raise TypeError(
                'Only support 4D, 3D and 2D tensor. But received with dimension: {:d}'.format(n_dim))
        if out_type == np.uint8:
            img_np = (img_np * 255.0).round()
            # Important. Unlike matlab, numpy.unit8() WILL NOT round by default.
        return img_np.astype(out_type)

    def calculate_psnr(self, img1, img2):
        # img1 and img2 have range [0, 255]
        img1 = img1.astype(np.float64)
        img2 = img2.astype(np.float64)
        mse = np.mean((img1 - img2) ** 2)
        if mse == 0:
            return float('inf')
        return 20 * math.log10(255.0 / math.sqrt(mse))

    def bgr2ycbcr(self, img, only_y=True):
        '''bgr version of rgb2ycbcr
        only_y: only return Y channel
        Input:
            uint8, [0, 255]
            float, [0, 1]
        '''
        in_img_type = img.dtype
        img.astype(np.float32)
        if in_img_type != np.uint8:
            img *= 255.
        # convert
        if only_y:
            rlt = np.dot(img, [24.966, 128.553, 65.481]) / 255.0 + 16.0
        else:
            rlt = np.matmul(img, [[24.966, 112.0, -18.214], [128.553, -74.203, -93.786],
                                  [65.481, -37.797, 112.0]]) / 255.0 + [16, 128, 128]
        if in_img_type == np.uint8:
            rlt = rlt.round()
        else:
            rlt /= 255.
        return rlt.astype(in_img_type)

    def ssim(self, img1, img2):
        C1 = (0.01 * 255) ** 2
        C2 = (0.03 * 255) ** 2

        img1 = img1.astype(np.float64)
        img2 = img2.astype(np.float64)
        kernel = cv2.getGaussianKernel(11, 1.5)
        window = np.outer(kernel, kernel.transpose())

        mu1 = cv2.filter2D(img1, -1, window)[5:-5, 5:-5]  # valid
        mu2 = cv2.filter2D(img2, -1, window)[5:-5, 5:-5]
        mu1_sq = mu1 ** 2
        mu2_sq = mu2 ** 2
        mu1_mu2 = mu1 * mu2
        sigma1_sq = cv2.filter2D(img1 ** 2, -1, window)[5:-5, 5:-5] - mu1_sq
        sigma2_sq = cv2.filter2D(img2 ** 2, -1, window)[5:-5, 5:-5] - mu2_sq
        sigma12 = cv2.filter2D(img1 * img2, -1, window)[5:-5, 5:-5] - mu1_mu2

        ssim_map = ((2 * mu1_mu2 + C1) * (2 * sigma12 + C2)) / ((mu1_sq + mu2_sq + C1) *
                                                                (sigma1_sq + sigma2_sq + C2))
        return ssim_map.mean()

    def calculate_ssim(self, img1, img2):
        '''calculate SSIM
        the same outputs as MATLAB's
        img1, img2,0, 255]
        '''
        if not img1.shape == img2.shape:
            raise ValueError('Input images must have the same dimensions.')
        if img1.ndim == 2:
            return self.ssim(img1, img2)
        elif img1.ndim == 3:
            if img1.shape[2] == 3:
                ssims = []
                for i in range(3):
                    ssims.append(self.ssim(img1, img2))
                return np.array(ssims).mean()
            elif img1.shape[2] == 1:
                return self.ssim(np.squeeze(img1), np.squeeze(img2))
        else:
            raise ValueError('Wrong input image dimensions.')


IMG_EXTENSIONS = ['.jpg', '.JPG', '.jpeg', '.JPEG', '.png', '.PNG', '.ppm', '.PPM', '.bmp', '.BMP']


def is_image_file(filename):
    """
    判断是不是图像
    Args:
        filename:
    Returns:
    """
    return any(filename.endswith(extension) for extension in IMG_EXTENSIONS)


def acquire_big_image_with_size(path, num):
    """
    判断图像尺寸,如若小于设定值 则返回 False
    :param path:出入文件路径
    :param path:尺寸大小
    :return:
    """
    try:
        img = cv2.imread(path)
        if img.shape[0] < num or img.shape[1] < num:
            return False
        return True
    except:
        print("path", path)


def acquire_LR_form_with_HR_in_bsrgan(HR):
    """
        以 bsrgan 的方式 从 HR 图 中 得到 LR图
    Args:
        HR: HR图
    Returns:LR图
    """
    from utils import utils_blindsr as blindsr
    HR = np.float32(HR / 255.)
    LR, img_H = blindsr.degradation_bsrgan(HR, sf=4, lq_patchsize=32, isp_model=None)
    LR = np.uint8((LR.clip(0, 1) * 255.).round())

    return LR


def acquire_LR_form_with_HR_in_realsr(HR):  # 未添加噪声
    """
    以 realsr 的方式 从 HR 图 中 得到 LR图
    Args:
        HR: HR图
    Returns:LR图
    """
    from scipy.io import loadmat
    from utils.KernelGAN import imresize
    import torchvision.transforms.functional as TF
    # from data.dataset_blindsr_add_realsr import  noiseDataset

    kernel_path = "/media/tcd/data/work/Shanghai_Archives_Bureau/real_sr/codes/preprocess/KernelGAN/results_1599/kernel_x4"
    kernel_paths = glob(
        os.path.join(kernel_path, '*_kernel_x4.mat'))  # ## 需要根据 https://github.com/sefibk/KernelGAN 然后 从源图像生成内核。
    kernel_num = len(kernel_paths)
    # Generate resize3_cut_img and apply model
    kernel_path = kernel_paths[np.random.randint(0, kernel_num)]
    mat = loadmat(kernel_path)
    k = np.array([mat['Kernel']]).squeeze()

    HR = TF.to_tensor(HR)
    HR = TF.to_pil_image(HR)
    LR = imresize(np.array(HR), scale_factor=1.0 / 4, kernel=k)
    # LR = LR.astype(np.float32) / 255.
    # realsr_noise="./trainsets/realsr/DPEDiphone_noise"
    # noises = noiseDataset(realsr_noise, HR.size[0] / 4, other=True)
    # noise = noises[np.random.randint(0, len(noises))]  # 此处 加的噪声
    #
    # # print("1",LR)
    # LR = torch.from_numpy(np.ascontiguousarray(np.transpose(LR, (2, 0, 1)))).float()
    # LR = torch.clamp(LR + noise, 0, 1)
    # LR = util.tensor2img(LR)
    return LR


def acquire_LR_form_with_HR_in_realsr_add_noise(HR):
    """
    以 realsr 的方式 从 HR 图 中 得到 LR图
    Args:
        HR: HR图
    Returns:LR图
    """
    from scipy.io import loadmat
    from utils.KernelGAN import imresize
    import torchvision.transforms.functional as TF
    from data.dataset_blindsr_add_realsr import noiseDataset

    kernel_path = "/media/tcd/data/work/Shanghai_Archives_Bureau/real_sr/codes/preprocess/KernelGAN/results_1599/kernel_x4"
    kernel_paths = glob(
        os.path.join(kernel_path, '*_kernel_x4.mat'))  # ## 需要根据 https://github.com/sefibk/KernelGAN 然后 从源图像生成内核。
    kernel_num = len(kernel_paths)
    # Generate resize3_cut_img and apply model
    kernel_path = kernel_paths[np.random.randint(0, kernel_num)]
    mat = loadmat(kernel_path)
    k = np.array([mat['Kernel']]).squeeze()

    HR = TF.to_tensor(HR)
    HR = TF.to_pil_image(HR)
    LR = imresize(np.array(HR), scale_factor=1.0 / 4, kernel=k)
    LR = LR.astype(np.float32) / 255.
    realsr_noise = "/media/tcd/data/DATA/浙江档案/上传NAS的/超分训练数据集/big_total_source_res_1599_1088_split1：1/DPEDiphone_noise"
    noises = noiseDataset(realsr_noise, HR.size[0] / 4, other=True)
    noise = noises[np.random.randint(0, len(noises))]  # 此处 加的噪声

    # print("1",LR)
    LR = torch.from_numpy(np.ascontiguousarray(np.transpose(LR, (2, 0, 1)))).float()
    LR = torch.clamp(LR + noise, 0, 1)
    LR = util.tensor2img(LR)
    return LR


def random_chop_img(filename, num):
    """
    判断图像尺寸,如若小于设定值 则返回 False
    :param filename:出入文件路径
    :param num:尺寸大小
    :return:img
    """
    img = cv2.imread(filename)
    H, W, C = img.shape
    rnd_h = random.randint(0, max(0, H - num))
    rnd_w = random.randint(0, max(0, W - num))
    HR = img[rnd_h:rnd_h + num, rnd_w:rnd_w + num, :]
    # LR = cv2.resize(HR, (num // 4, num // 4)) # # error 的方式
    # print(HR/255.0)
    if random.random() < 0.5:
        LR = acquire_LR_form_with_HR_in_bsrgan(HR)
    else:
        # LR = acquire_LR_form_with_HR_in_realsr(HR)
        LR = acquire_LR_form_with_HR_in_realsr_add_noise(HR)  # 完全按照realsr 的方式
    # LR = acquire_LR_form_with_HR_in_bsrgan(HR)
    # LR1 = acquire_LR_form_with_HR_in_realsr(HR)
    # cv2.imshow("da",HR)
    # cv2.imshow("lr", LR)
    # cv2.imshow("lr1", LR1)
    # cv2.waitKey(0)
    return HR, LR


def acquire_test_data(path):
    """
    获取HR 和bicubic 降四倍的LR图
    :param path:图文件夹
    :return:数据集
    """
    filenames = [os.path.join(path, filename) for filename in os.listdir(path) if
                 is_image_file(os.path.join(path, filename))]
    filenames = [filename for filename in filenames if acquire_big_image_with_size(filename, 128)]
    dataset = [random_chop_img(filename, 128) for filename in filenames]
    return dataset


def acquire_model_result(model_path, img_L):
    """
    模型前向计算 输出图片；如需更换模型，只需替换模型导入和此处即可
    Args:
        model_path:
        img:
    Returns:
    """
    sf = 4
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    torch.cuda.empty_cache()
    model = net(in_nc=3, out_nc=3, nf=64, nb=23, gc=32, sf=sf)  # define network
    model.load_state_dict(torch.load(model_path), strict=True)
    model.eval()
    for k, v in model.named_parameters():
        v.requires_grad = False
    model = model.to(device)
    torch.cuda.empty_cache()
    try:
        # --------------------------------
        # (1) img_L
        # --------------------------------
        # img_L = util.imread_uint(img_path, n_channels=3)
        img_L = util.uint2tensor4(img_L)
        img_L = img_L.to(device)
        # --------------------------------
        # (2) inference
        # --------------------------------
        img_E = model(img_L)
        # --------------------------------
        # (3) img_E
        # --------------------------------
        # img_L = util.tensor2uint(img_L)
        img_E = util.tensor2uint(img_E)
        # util.cv2show(img_L, "source")
        # util.cv2show(img_E, "super_resolution")
        # cv2.waitKey(0)
        # util.imsave(img_E, "./temp.png")
    except Exception as e:
        print(e, "模型计算错误")

    return img_E


def acquire_psnr_and_ssim(path, str1, nums):
    model_path = os.path.join(path, str1)
    model_paths = glob(model_path)
    model_paths = sorted(model_paths)
    # test_img_path = "/media/tcd/data/DATA/浙江档案/测试集/13"
    test_img_path = "/media/tcd/data/DATA/上海档案/test"
    dataset = acquire_test_data(test_img_path)
    calculate_utils = Util()
    res = []
    train_info = SummaryWriter(log_dir="./")
    for model_path in model_paths:
        print("model_path", model_path)
        if int(os.path.split(model_path)[-1][:-6]) < nums:
            continue
        psnr_num = 0
        ssim_num = 0
        num = 0
        for GT, LR in dataset:
            try:
                HR = acquire_model_result(model_path, LR)
                psnr_num += calculate_utils.calculate_psnr(GT, HR)
                ssim_num += calculate_utils.calculate_ssim(GT, HR)
                num += 1
            except Exception as e:
                print(e)
        print(os.path.split(model_path)[-1][:-6], "psnr结果", psnr_num / num)
        print(os.path.split(model_path)[-1][:-6], "ssim结果", ssim_num / num)
        res.append([int(os.path.split(model_path)[-1][:-6]), psnr_num / num, ssim_num / num])
        train_info.add_scalar("psnr", psnr_num / num, int(os.path.split(model_path)[-1][:-6]))
        train_info.add_scalar("ssim", ssim_num / num, int(os.path.split(model_path)[-1][:-6]))
    train_info.close()
    return res


if __name__ == '__main__':
    train_info = SummaryWriter(log_dir="./tb_logger/")

    # path = "/media/tcd/data/DATA/super_resolution/BSRGAN/bsrgan_add_realsr_544add544/models"
    path = "/home/tcd/sr_model"
    str1 = "*_E.pth"
    E_lis = acquire_psnr_and_ssim(path, str1, 0)

    # path="/media/tcd/data/DATA/super_resolution/BSRGAN/bsrgan_x4_gan_1094_scale12/models"
    # str1="*_G.pth"
    # G_lis=acquire_psnr_and_ssim(path,str1,0)

    """
    1:1 add noise
    """
    # [[5000, 19.98787590070196, 0.47760127726577994], [10000, 20.06922252798226, 0.47391042708631953], [15000, 19.998432527300416, 0.46564767308073585], [20000, 20.059051737705474, 0.4778447248643505], [25000, 20.025689798711173, 0.47755835661020135], [30000, 19.92522976090231, 0.4733915640521138], [35000, 19.816610704942697, 0.46886507370103203], [40000, 20.077909140797995, 0.47406058478485297], [45000, 20.027028273535507, 0.47903395865675646], [50000, 19.978535953450702, 0.4703076946170606], [55000, 19.959156925480393, 0.4775821084406835], [60000, 19.994021181671233, 0.46924927308217645], [65000, 20.049748943695942, 0.4743428388511786], [70000, 20.02263856264948, 0.47907709236689444], [75000, 20.011754574374336, 0.47783024572792226], [80000, 19.90446564372217, 0.4776107091286058], [85000, 19.9917048577177, 0.486955089358286], [90000, 20.007690875590637, 0.48593772994986495], [95000, 19.916244208549507, 0.4763047995577153], [100000, 19.936110987871796, 0.48766585336743146], [105000, 20.03469417399162, 0.4881494988415147], [110000, 20.054185868713258, 0.4880909777528233], [115000, 19.97047331190792, 0.48674096043684034], [120000, 20.028743574448036, 0.4891493227832918], [125000, 19.965915217256452, 0.4862454117585668], [130000, 19.794225388868604, 0.4737596347607962], [135000, 19.918801772455133, 0.48015758554500143], [140000, 19.82393187643216, 0.47938374042624715], [145000, 19.819518907386175, 0.46661539195944507], [150000, 19.89389866796099, 0.47371740193270223], [155000, 19.883621640946377, 0.47521971249857736], [160000, 19.91707012695549, 0.4809297436424303], [165000, 19.885626107868607, 0.4717039554836114], [170000, 19.98865052287974, 0.4821626090403939], [175000, 19.970376759992682, 0.48861642399590793], [180000, 20.018224801694437, 0.4834218381980701], [185000, 19.917238190556343, 0.4786137559547079], [190000, 19.96048611645521, 0.47344409874414695], [195000, 19.924365985119863, 0.4665841934547764], [200000, 19.93643916501073, 0.4730923152502676], [205000, 19.98130986566894, 0.4763012155288314], [210000, 19.829839486981022, 0.46356079534827666], [215000, 19.998155038192067, 0.4819607067137385], [220000, 19.94157816775528, 0.47303647020231987], [225000, 19.99052080024038, 0.48042766508969753], [230000, 20.074933848650403, 0.485204284048543], [235000, 20.007994571174684, 0.482302096447585], [240000, 20.036434533336525, 0.475229626984565], [245000, 19.94676724065696, 0.47403735752942744], [250000, 19.932207271478966, 0.4668914784833576], [255000, 20.055854266599034, 0.4738813543544783], [260000, 19.925115991656433, 0.46598500278293314], [265000, 19.90097262778408, 0.46754140112593834], [270000, 20.02428915652796, 0.47322822007407295], [275000, 19.98181104091212, 0.4761541388157272], [280000, 19.994328879583158, 0.46647239074360075], [285000, 20.047454669996835, 0.473793799350182], [290000, 20.059296730365183, 0.4836900934529105], [295000, 19.962191867644574, 0.4754953004612766], [300000, 19.895485924789455, 0.46708544896173826], [305000, 20.092992463265283, 0.4783051034107597], [310000, 19.881506928551254, 0.4700053960287295], [315000, 19.99458818132576, 0.47236843742302054], [320000, 20.053981881415563, 0.478655719685045], [325000, 20.0475895941125, 0.4753855628890823], [330000, 19.88921276803743, 0.4596411726295816], [335000, 20.048282617377417, 0.46870069746058285], [340000, 20.07924213138588, 0.4781428044880496], [345000, 19.924062531467566, 0.47011929797818997], [350000, 20.07685649843028, 0.48291593449831405], [355000, 20.050027270212315, 0.47461831255573894], [360000, 20.027390156169407, 0.4726775840495382], [365000, 19.96932678122579, 0.47089955531848665], [370000, 19.95794958906324, 0.4701368860531853], [375000, 19.929418359676625, 0.4709514091606616], [380000, 19.980102976539428, 0.468201370502097], [385000, 19.885576227776248, 0.4678027767957649], [390000, 19.979651404195575, 0.46973472760335006], [395000, 20.01182457725173, 0.4680624150090197], [400000, 19.92755112090193, 0.4724559661996115], [405000, 19.954229847617736, 0.4720637766984745], [410000, 19.970846517747123, 0.48051174948989966], [415000, 19.86272724542489, 0.4724559619822428], [420000, 19.77825933977686, 0.4682797565272015], [425000, 20.04048047425958, 0.4762240414434206], [430000, 19.79358437770486, 0.4600115410824507], [435000, 20.068716863414874, 0.47839609752454615], [440000, 19.913998661227595, 0.46940500683980024], [445000, 19.937880794453356, 0.4708464752196348], [450000, 19.9312547142331, 0.471716208694782], [455000, 19.96498218815911, 0.46636654789328846], [460000, 19.85131118877822, 0.47011447719571897], [465000, 19.902337022275624, 0.47192968662303797], [470000, 19.880953792550553, 0.46543867081600626], [475000, 19.851141414208406, 0.461537724809307], [480000, 20.099582828880422, 0.4719035013490527], [485000, 20.063541814014854, 0.47536491870587066], [490000, 19.827415244020536, 0.4612417392589623], [495000, 19.8927934837538, 0.4689456291445695], [500000, 19.87456179970711, 0.46007095394035763], [505000, 20.015468007306602, 0.474134749349403], [510000, 19.96379874441191, 0.4769669432704774], [515000, 19.83407205691189, 0.47374454377611075], [520000, 20.0052902238512, 0.4765211988150271], [525000, 19.935890348939715, 0.4721045925750646], [530000, 19.775782706723305, 0.4683072124016249], [535000, 19.863715258721708, 0.47274336166371766], [540000, 19.88624298565263, 0.4668761255996392], [545000, 19.705430630268523, 0.45596206595954347], [550000, 19.82508098646887, 0.46677977452751324], [555000, 19.869201579708836, 0.4708889661992532], [560000, 20.048272960917608, 0.4791673020385193], [565000, 19.946920870791427, 0.4668874996620696], [570000, 19.89596016673415, 0.4621990241219428], [575000, 19.985244941770503, 0.4607282173864424], [580000, 19.937866895760273, 0.46028790654383667], [585000, 19.87067652361685, 0.46600311640175096], [590000, 20.02052943717554, 0.4758531583491693], [595000, 19.93155581021931, 0.46443171955364876], [600000, 19.855166435474942, 0.4671090674257822], [605000, 19.94903570830706, 0.4773689993551006], [610000, 19.982886002845753, 0.4724534016868268], [615000, 19.973631450958344, 0.46888804717572147]]
    """
    1:1 no add noise
    """
    # E_lis=[[5000, 22.438762916765967, 0.5360468871297352], [10000, 22.422010818060574, 0.5405970972276364], [15000, 22.508054999486088, 0.5438125806059115], [20000, 22.62186234025495, 0.5458805451994847], [25000, 22.45326751677186, 0.5438880997196585], [30000, 22.38475276077481, 0.5395896200848229], [35000, 22.43153523010787, 0.5452581533993072], [40000, 22.64793297174375, 0.5517756627451765], [45000, 22.487218257682592, 0.5430689793417237], [50000, 22.583067576211754, 0.5418178762610567], [55000, 22.541128853769536, 0.5399927107535933], [60000, 22.66569538843031, 0.5448124009371277], [65000, 22.58615990964643, 0.5331506630575145], [70000, 22.619385438971342, 0.5410769816442735], [75000, 22.71154282729777, 0.5468178044754906], [80000, 22.67546259812233, 0.5484460862221588], [85000, 22.583040059658195, 0.5514302676046554], [90000, 22.615910904410036, 0.5562343580462499], [95000, 22.6038548887236, 0.5437024095200595], [100000, 22.67121844776928, 0.5561110077192112], [105000, 22.69216903514918, 0.5540279561348622], [110000, 22.76368937287256, 0.556815439679321], [115000, 22.6533025867775, 0.5591321698433636], [120000, 22.69255740622633, 0.5579593876847745], [125000, 22.742909872100007, 0.560713826046148], [130000, 22.51007031742396, 0.5404425450192325], [135000, 22.6327688433733, 0.5457720776328855], [140000, 22.63402489477705, 0.5560699838688531], [145000, 22.652641464262704, 0.5484428684616109], [150000, 22.797682766417857, 0.5556112828746578], [155000, 22.768519467149282, 0.5564420509507549], [160000, 22.61621532100424, 0.5511709043755237], [165000, 22.680867476083414, 0.5514917037951184], [170000, 22.726515493760722, 0.5578186669958262], [175000, 22.72773587358267, 0.5550366362946135], [180000, 22.752446423815, 0.5535950212720777], [185000, 22.71893961248913, 0.5450323961809992], [190000, 22.704001541804452, 0.542939119655323], [195000, 22.749308557025422, 0.5498434169100657], [200000, 22.758973860916004, 0.5451743636887312], [205000, 23.06259016814894, 0.5686464146915797], [210000, 22.89723788849269, 0.5538280847815914], [215000, 23.00507549593333, 0.557268113006961], [220000, 22.872256904715083, 0.5650950951877898], [225000, 22.888219130060246, 0.5634934306241626], [230000, 22.84882497658489, 0.553969667491845], [235000, 22.90929942529763, 0.5588227101939884], [240000, 22.933327288053842, 0.5599967419286906], [245000, 22.77805049547776, 0.55827634461487], [250000, 22.76163332500122, 0.5487658697055561], [255000, 22.903470934991642, 0.562674557700759], [260000, 22.90209947506479, 0.5601183709447131], [265000, 22.70824021307615, 0.5522471720330064], [270000, 22.854148797571213, 0.5549772255224263], [275000, 22.857774150826145, 0.5572130481096383], [280000, 22.837162728353654, 0.5514447234677118], [285000, 22.8163375402393, 0.5577564632277636], [290000, 22.836900367676716, 0.5616589640020953], [295000, 22.79561267115536, 0.551948710997135], [300000, 22.8058955545115, 0.5534540831137837], [305000, 22.863097936289137, 0.5509260002328248], [310000, 22.7902346121517, 0.5582852961731053], [315000, 22.799721938425755, 0.5515432723078181], [320000, 22.767776682721305, 0.5495412182413815], [325000, 22.92414312830047, 0.5649132872047758], [330000, 22.97688422420913, 0.5649601239081589], [335000, 22.8244206851335, 0.5530258502535979], [340000, 22.794404870561007, 0.5483018594017863], [345000, 22.748927188005265, 0.5487710217799968], [350000, 22.837994279030713, 0.5547594593551173], [355000, 22.76861366114516, 0.5545959609388694], [360000, 22.83232546189523, 0.5603382496923289], [365000, 22.948406897476417, 0.5590298956708067], [370000, 22.85166442763349, 0.5580401174954821], [375000, 22.744644292910273, 0.5502132930175044], [380000, 22.9001319605103, 0.5572495852170988], [385000, 22.88724675664755, 0.5615060604220785], [390000, 22.898331072903623, 0.555916810642904], [395000, 22.89954896589081, 0.5569352893772332], [400000, 22.8680460589038, 0.553195112597171], [405000, 22.917702866694572, 0.5551641850971032], [410000, 22.98635826421309, 0.561170150950467], [415000, 22.884978960351066, 0.5523653635725612], [420000, 22.88832853084499, 0.5490982723386079], [425000, 22.84689488016507, 0.5574740160868411], [430000, 22.79404239148106, 0.5491742970441661], [435000, 23.02448957641502, 0.5659309501050798], [440000, 22.934281014632166, 0.5574211434978215], [445000, 23.03904000334995, 0.5629199780911112], [450000, 22.939440413874564, 0.5561204270817495], [455000, 22.869987940499932, 0.5465387847434993], [460000, 22.87772953195855, 0.5610362275207283], [465000, 22.934641830915524, 0.5654235373065336], [470000, 22.812740442666033, 0.5558035933379764], [475000, 22.846081658592, 0.5548231244827976], [480000, 22.92417852700278, 0.5595444524355127], [485000, 22.93332246396387, 0.5618964403826892], [490000, 22.77493936043333, 0.5535701834111807], [495000, 22.80176779895526, 0.5559098352068527], [500000, 22.67351167994787, 0.5390196231586634], [505000, 22.696095712759437, 0.5468922795187197], [510000, 22.733264555507514, 0.5491334947076325], [515000, 22.6655350921297, 0.546433225667623], [520000, 22.690609927383967, 0.544805385398538], [525000, 22.64900466718879, 0.54947592360029], [530000, 22.539546125872626, 0.5439359802938244], [535000, 22.692366201734213, 0.5489553482514771], [540000, 22.749778338396588, 0.5546583552120138], [545000, 22.59786325221807, 0.545914702273331], [550000, 22.650731368907756, 0.5559688903631355], [555000, 22.795871799640143, 0.557689228628392], [560000, 22.918827411213737, 0.5601930962887101], [565000, 22.87715192380852, 0.5579303332865078], [570000, 22.810679469449262, 0.5532889380340394], [575000, 22.873068394270653, 0.550657474318854], [580000, 22.797448953986287, 0.5491403231423473], [585000, 22.914949596370743, 0.559529876713831], [590000, 22.851169626584547, 0.5561104259058951], [595000, 22.75566536972029, 0.5509975582781492], [600000, 22.728191245128027, 0.5520166630760519], [605000, 22.728619886289, 0.5494440595930492], [610000, 22.76364249781226, 0.5479404181649924], [615000, 22.961459038035542, 0.558405275571501]]
    # G_lis=[[5000, 22.937806824351576, 0.550926773992189], [10000, 22.64457895616831, 0.5400754189448213], [15000, 22.558835464225588, 0.5435960276164671], [20000, 22.949496647930395, 0.5657335580694097], [25000, 22.790031105455856, 0.553068639875322], [30000, 22.675128022999257, 0.5443374988491656], [35000, 23.006152524479468, 0.5617236960012775], [40000, 22.89791392429067, 0.5600655335438236], [45000, 23.020557981762856, 0.5601221490103091], [50000, 23.01751872249708, 0.5758567709841895], [55000, 22.563945084244715, 0.5493480075774195], [60000, 22.843815026415808, 0.5450088379622647], [65000, 22.62103672605454, 0.5574242588303979], [70000, 22.60743267656689, 0.550278568439895], [75000, 22.962573617821498, 0.5492373271979808], [80000, 22.83657755632193, 0.5652438585040696], [85000, 22.795757393942914, 0.562895275505222], [90000, 22.22889348940179, 0.5424531060535835], [95000, 22.82034712987427, 0.5463740102853294], [100000, 22.639968493888908, 0.5478184235098399], [105000, 22.756346331006664, 0.5477763409477445], [110000, 22.768946370015136, 0.5750404272043116], [115000, 23.145149106861915, 0.5736428145193155], [120000, 22.8577745534375, 0.5601761496826254], [125000, 22.79216991870694, 0.5438031902812271], [130000, 22.838167530819057, 0.5589184641527638], [135000, 22.703968375063518, 0.5555328816354176], [140000, 22.774105980475003, 0.5527033809603774], [145000, 22.50933567372131, 0.5336015355079513], [150000, 22.905389569806818, 0.5598029078795251], [155000, 22.886299577558223, 0.5597509833133458], [160000, 22.78862291054198, 0.5559790211584364], [165000, 22.862093101633793, 0.5466453834527696], [170000, 22.839435340140188, 0.5585167621022263], [175000, 22.831241291995205, 0.5579740719279321], [180000, 22.77045934119459, 0.5454204833816116], [185000, 23.069903736027936, 0.5751819938782424], [190000, 22.967933143878874, 0.5606576027674558], [195000, 23.194174595594212, 0.5810376257311984], [200000, 22.687796780763954, 0.5523360518650874], [205000, 22.891457981130163, 0.5612773971794053], [210000, 22.86977825804625, 0.5489029971616473], [215000, 23.04476836685129, 0.56554918946058], [220000, 22.89052269336386, 0.5547454363176815], [225000, 22.797464226473643, 0.5575907012587661], [230000, 22.844205721246837, 0.5504809135716834], [235000, 22.728622314238812, 0.5360940989060705], [240000, 23.02567023177154, 0.5551528408177413], [245000, 22.8026304463696, 0.5481056290129324], [250000, 22.972860974704254, 0.5606989838635099], [255000, 22.61663297734264, 0.5427980649921742], [260000, 22.599782795246718, 0.5419214084406596], [265000, 22.613467915230046, 0.5512638784211635], [270000, 22.87677694895192, 0.5494676666029535], [275000, 22.81429617231513, 0.5546428897041945], [280000, 22.87170711106332, 0.5562962879394691], [285000, 22.67050093064488, 0.5457906037303005], [290000, 22.90814228451848, 0.5456073420372503], [295000, 22.694600791261376, 0.5519936780318191], [300000, 23.15620262516368, 0.5564559881592347], [305000, 22.986973408651263, 0.5562096769103348], [310000, 22.843280698943286, 0.5592829948392036], [315000, 23.032167951624558, 0.5604599596615373], [320000, 22.650131781139724, 0.5466004023683353], [325000, 23.00979622836527, 0.5579854219382823], [330000, 22.806942773560387, 0.5619443505018177], [335000, 22.766332619302933, 0.549449134420035], [340000, 22.76736189931183, 0.5465126114281892], [345000, 22.85306300787171, 0.5486106824321146], [350000, 22.86807539700973, 0.5486971993642289], [355000, 22.670292633224065, 0.5554988470522427], [360000, 22.771188134577535, 0.5480582385752713], [365000, 23.09707771685795, 0.5656882401546515], [370000, 22.5549123429791, 0.5419649251318717], [375000, 22.97483202724134, 0.5305506587412396], [380000, 22.887462020214066, 0.5370604810637284], [385000, 22.933773912115328, 0.5371260210910626], [390000, 22.743593301047024, 0.5464361842021529], [395000, 22.554062449841545, 0.5257064849995229], [400000, 22.754271011399577, 0.5295603716155514], [405000, 22.780927967372275, 0.5277936280336434], [410000, 23.037154661693336, 0.5585998244738661], [415000, 22.667533125273387, 0.5560719192966304], [420000, 22.728594178841767, 0.5424021749331507], [425000, 22.534160945504766, 0.5420355289328239], [430000, 22.51316020316388, 0.5286689016304436], [435000, 22.671193014207702, 0.5549643275417825], [440000, 22.676680012086404, 0.5531191698548824], [445000, 22.95873512866624, 0.5610343372172604], [450000, 22.66764204651771, 0.5613974514809905], [455000, 22.683155715776785, 0.5498710671626245], [460000, 22.87879311635003, 0.5563497090451696], [465000, 22.472400678906176, 0.5402096840650373], [470000, 22.64372100397869, 0.5380914851342103], [475000, 22.46896862341431, 0.5379110727670413], [480000, 22.80432101789572, 0.5556061885854433], [485000, 22.867006139408584, 0.5635056530002867], [490000, 22.472988828102082, 0.5492038695377464], [495000, 22.603096351759177, 0.5409225278955252], [500000, 22.675698545090764, 0.5437880912861719], [505000, 22.648526268771164, 0.5495001326032015], [510000, 22.68950828469491, 0.5565035021588778], [515000, 22.210444665231606, 0.5348616415926106], [520000, 22.866213825881463, 0.546892872100804], [525000, 22.645691095882643, 0.536415576251725], [530000, 22.297197078042824, 0.5472535869713201], [535000, 22.842307498021928, 0.5514873178857103], [540000, 22.528194786160242, 0.5417684795443064], [545000, 22.34079930480691, 0.5422980777929214], [550000, 22.762677142313343, 0.5366239261396119], [555000, 22.457597229759536, 0.5208298780414812], [560000, 22.936789039860713, 0.5409397017984113], [565000, 22.915756774602364, 0.5449807740543842], [570000, 22.90194793120741, 0.5452108985393898], [575000, 22.795462943748856, 0.5459094489408496], [580000, 22.637712423885397, 0.5330077691922189], [585000, 22.70433561971723, 0.5610028230216484], [590000, 22.715126624947395, 0.544588585899089], [595000, 22.89673901544599, 0.5430754360598196], [600000, 22.85542975553923, 0.5298549174341296], [605000, 22.629895460553133, 0.5515159549558198], [610000, 22.707191578531603, 0.5549003819869162], [615000, 22.86083989945545, 0.546580331495811]]
    """
    1:2 add noise
    """
    # G_lis=[[5000, 20.500730374396575, 0.5556446018348309], [10000, 20.49076489924332, 0.5510879039102065], [15000, 20.22219922541754, 0.5534440484220748], [20000, 20.326742678946452, 0.5561304237625417], [25000, 20.242412869983134, 0.551893475977647], [30000, 19.967790839094462, 0.5329267245842796], [35000, 20.356142083352374, 0.5417195007073882], [40000, 20.227059346186284, 0.5474127441241547], [45000, 20.27752683917314, 0.5492048969429878], [50000, 20.386236720832876, 0.5308791806174282], [55000, 20.257400930914518, 0.5562216310453298], [60000, 20.128647015499325, 0.5383087927577608], [65000, 20.135852701180177, 0.5235025221173839], [70000, 20.20265198067801, 0.5366673327826577], [75000, 20.174019613761423, 0.5317134656080229], [80000, 20.170977195882486, 0.5550271577521249], [85000, 20.21414685758418, 0.5281394140324613], [90000, 20.354879206668805, 0.5523710871416003], [95000, 20.244463096298965, 0.5492911387509732], [100000, 19.97680596115423, 0.5216880150149458], [105000, 20.359218736401782, 0.5396758209452186], [110000, 20.146116536615853, 0.538586883632657], [115000, 20.467823732377916, 0.5550513163278273], [120000, 20.564598351402495, 0.5535342363675577], [125000, 20.058490151804545, 0.5523333429620443], [130000, 20.086215231721432, 0.5493618168696854], [135000, 20.054230577253747, 0.5298113863248819], [140000, 20.52290281809382, 0.553199915165403], [145000, 20.060136957641397, 0.5471761433142575], [150000, 20.35733725689795, 0.5527956717462064], [155000, 20.240060628463596, 0.5407384065684615], [160000, 20.211975688309973, 0.5543811645296663], [165000, 20.078556711874334, 0.5365527688232322], [170000, 20.12268875299534, 0.5364601762110025], [175000, 20.236495516395717, 0.5460656703000104], [180000, 20.24099174290355, 0.5356224729641881], [185000, 19.746041936977385, 0.5432489859753244], [190000, 20.13279589994008, 0.5235153737145843], [195000, 20.33026994335319, 0.5484157291115412], [200000, 20.547309997069515, 0.5605701240693367], [205000, 20.179921171092765, 0.549410830880025], [210000, 20.344606237422237, 0.5372067612323963], [215000, 20.28083256627645, 0.5652756605862088], [220000, 19.983987960142546, 0.5435735204928017], [225000, 20.259856142188184, 0.5266797639619035], [230000, 20.298084578970144, 0.5448177823951561], [235000, 20.30848127441507, 0.547252472951625], [240000, 20.38034940453509, 0.5563524167249001], [245000, 20.290057130812023, 0.5325512837722044], [250000, 20.326447720128364, 0.5461354798668663], [255000, 20.049546748180273, 0.53164487053806], [260000, 20.289072428920228, 0.5410737237925206], [265000, 20.04623588331292, 0.5449039765075155], [270000, 20.12264674907597, 0.5355347798732935], [275000, 19.994517404867022, 0.537693490797359], [280000, 19.93569832374856, 0.531848232632972], [285000, 20.28041424019604, 0.5392218516676144], [290000, 20.10485226766836, 0.5499736877637902], [295000, 20.525028673565238, 0.5513794532139781], [300000, 20.087929712726044, 0.5320197379546789], [305000, 20.07184299988399, 0.5503382275679556], [310000, 20.17037811316915, 0.547520270500389], [315000, 20.2729444961839, 0.547204372155085], [320000, 20.260792650971396, 0.5646017289824333], [325000, 20.459529679509863, 0.5449349670376676]]
    # E_lis=[[5000, 20.75664237626761, 0.537741222365235], [10000, 20.752750197356953, 0.5430396275643373], [15000, 20.85142081120957, 0.5489470657603065], [20000, 20.791166401409903, 0.5466043236884908], [25000, 20.817043480684536, 0.5430773664256577], [30000, 20.834428926598523, 0.5480791780633374], [35000, 20.850980582951358, 0.5460232783884569], [40000, 20.882986345672442, 0.5531893818239787], [45000, 20.830943697686596, 0.5459416702405611], [50000, 20.89614751019571, 0.5445410330049825], [55000, 20.807078374005297, 0.5533951006121968], [60000, 20.78081301698441, 0.541518197856277], [65000, 20.82023198278329, 0.537020900505965], [70000, 20.78850854395323, 0.5390992147475104], [75000, 20.890398131809512, 0.5481429555148594], [80000, 20.71721426701404, 0.5454956484932073], [85000, 20.773821857350054, 0.543552936482662], [90000, 20.78222890463371, 0.5393090868581158], [95000, 20.91120770904418, 0.5469432613122758], [100000, 20.799165440521374, 0.5393435990569995], [105000, 20.909675482232604, 0.5402606126214005], [110000, 20.920450420904597, 0.5465948876944586], [115000, 20.853588652926266, 0.5428103831177166], [120000, 20.80992857212467, 0.5396362821844035], [125000, 20.729789521123006, 0.5345225273880175], [130000, 20.803226526395715, 0.5315729493637738], [135000, 20.81587083471493, 0.5387676848339702], [140000, 20.877819454327046, 0.5439360396714364], [145000, 20.94394638175293, 0.5486948661512479], [150000, 20.915642401229814, 0.5429036688790679], [155000, 20.84978046475329, 0.5426425484416025], [160000, 20.914743744392613, 0.5448456621572166], [165000, 20.864331288869757, 0.5422345848409902], [170000, 20.880252837670987, 0.5416383324340192], [175000, 20.841299534660322, 0.5414167045020687], [180000, 20.864377212695963, 0.5447306882023095], [185000, 20.90260713344221, 0.5450787924813277], [190000, 20.851637871199824, 0.5434282653041344], [195000, 20.860800258366258, 0.5411361597654334], [200000, 20.978117703939027, 0.5499635704079293], [205000, 20.923400153493212, 0.5467005912333123], [210000, 20.9150563443919, 0.5505346016928571], [215000, 20.94604104771045, 0.5494089345161666], [220000, 20.907014581855737, 0.5419183683459001], [225000, 20.924562581465732, 0.5399404673958936], [230000, 20.835741224783447, 0.5373340015888377], [235000, 20.926168000412222, 0.546156984980968], [240000, 20.900113783311014, 0.5397570547053384], [245000, 20.777094254563227, 0.5320784733067812], [250000, 20.879489511224477, 0.5414846923939016], [255000, 20.899882963491297, 0.5451224743742304], [260000, 20.82859092758005, 0.5402849744659014], [265000, 20.981703224899302, 0.5485331588739243], [270000, 20.881951434933825, 0.5401532262080548], [275000, 20.83256613361321, 0.5356432646946094], [280000, 20.888940908816487, 0.5342212387772173], [285000, 20.91456170047254, 0.5404500522574107], [290000, 20.923479745312072, 0.5445001322614007], [295000, 20.95847679069224, 0.5475632535063545], [300000, 20.823278917519502, 0.5359898397249372], [305000, 20.83619519616584, 0.539604270501206], [310000, 20.931488305283366, 0.5457910354234745], [315000, 20.880432231049426, 0.547011665814701], [320000, 20.905919006202087, 0.5542189108795282], [325000, 20.924469803931395, 0.5487776526063664]]
    """
    1:2 no noise 1
    """
    # E_lis=[[5000, 22.900894214684314, 0.5638562200669374], [10000, 22.987264544795355, 0.5685602958138047], [15000, 22.59232375354596, 0.5553174830528571], [20000, 22.684332298266277, 0.5600106254496237], [25000, 22.77255641796051, 0.5697708608359436], [30000, 22.904731039255616, 0.5758902983201221], [35000, 22.85551723225031, 0.5723847117751985], [40000, 22.984055189773525, 0.5724552184925027], [45000, 23.00588681714931, 0.5760022944141918], [50000, 22.7859927882606, 0.5704826333965209], [55000, 22.80846546810151, 0.5818098945250832], [60000, 22.8443888289748, 0.5740836903991946], [65000, 22.797524905932818, 0.5651427274204649], [70000, 22.753621609523798, 0.573948776722107], [75000, 22.94522272288201, 0.5811635949332714], [80000, 22.716349315885253, 0.5724044495009971], [85000, 22.911701078343103, 0.5741411840673368], [90000, 22.80883859353023, 0.5732157121491434], [95000, 22.862398610320177, 0.5729403475295902], [100000, 22.904034080944975, 0.5796180006104825], [105000, 22.804078341146955, 0.5700081044006782], [110000, 22.940397109431128, 0.5834728152125813], [115000, 22.916641313529556, 0.5722869798361662], [120000, 22.949639574130067, 0.5760078261713452], [125000, 22.95706540137727, 0.5695456770148459], [130000, 22.942416666794678, 0.5649886718924966], [135000, 22.93015889472168, 0.5711292836257582], [140000, 22.955837029115212, 0.5731896622802999], [145000, 22.980640291503555, 0.5797535955332115], [150000, 22.846315597199293, 0.5749822557658316], [155000, 22.87702636403705, 0.5739077499087921], [160000, 22.97972996761404, 0.5728300079227248], [165000, 22.999607060146758, 0.5744551332054566], [170000, 22.92339220992076, 0.5706677254334153], [175000, 22.806231155380093, 0.5637657369289413], [180000, 22.81763618764557, 0.5711054071003263], [185000, 22.700058260847666, 0.564817919669468], [190000, 22.924200347994336, 0.5772548779029065], [195000, 22.999263863496413, 0.5792163805097955], [200000, 23.024414428660847, 0.582436618673547], [205000, 22.87304462125132, 0.5733844427294068], [210000, 22.876814607185146, 0.5853502688526367], [215000, 23.004482194753294, 0.5868072780696796], [220000, 22.96681229875718, 0.5811180453327465], [225000, 23.00376436403123, 0.5806755528978413], [230000, 23.03289142047009, 0.5785579559883486], [235000, 22.90888573740838, 0.5784995836257056], [240000, 22.9528067880076, 0.5806612690733531], [245000, 22.949072408849037, 0.5762103910825476], [250000, 22.775435637443643, 0.5731997775451866], [255000, 22.886350264719404, 0.5794357872664643], [260000, 22.87744005378928, 0.5740113882967124], [265000, 22.896961989431265, 0.5840104111998359], [270000, 22.8633003590066, 0.5787442055078561], [275000, 22.707227014036818, 0.56653756551171], [280000, 22.82585288533968, 0.570526459001014], [285000, 22.830988701533904, 0.5714401869729426], [290000, 22.90590842904587, 0.5835056027640897], [295000, 22.730627164266657, 0.5662719594684388], [300000, 22.887529601476935, 0.5722322992360402], [305000, 22.840486819814267, 0.5786649140643005], [310000, 22.881669260998155, 0.5800162502998002], [315000, 22.80177406947303, 0.5795523436164239], [320000, 22.81690091250976, 0.5838286677211438], [325000, 23.004455514686015, 0.5819345007522726]]
    """
    1:2 no noise 2
    """
    # E_lis=[[5000, 23.800831971075564, 0.5982104572626452], [10000, 24.010882389102242, 0.591465110920598], [15000, 23.48784140230989, 0.5834267003745646], [20000, 23.98798510370509, 0.5945732783757156], [25000, 23.84999793781147, 0.6022332272274225], [30000, 23.6387236476561, 0.596107878997796], [35000, 23.550748320209856, 0.5962200619369019], [40000, 23.344832393446517, 0.5917712584793627], [45000, 23.758775365077458, 0.5923745593145812], [50000, 23.489219732101407, 0.5803950658968879], [55000, 23.32101820134055, 0.5822192133658775], [60000, 23.70129599207531, 0.5891973235760417], [65000, 23.693023314830775, 0.5910011072225869], [70000, 23.535151831839304, 0.5975188752819356], [75000, 23.635695247789606, 0.5914669032163584], [80000, 23.888454494110697, 0.5988533715253382], [85000, 23.465486210582824, 0.5906442900050038], [90000, 23.702851747997848, 0.5858193041334394], [95000, 23.322691453485525, 0.5908157224628465], [100000, 23.252929746644288, 0.5871597845454652], [105000, 23.921887894628334, 0.5946703375140284], [110000, 23.88009043833609, 0.6031886432165231], [115000, 23.740391451721685, 0.5877081991771577], [120000, 23.638812087604297, 0.5813046123953018], [125000, 23.630564241046333, 0.5920066227661624], [130000, 23.258094456421716, 0.5715402341046769], [135000, 23.498826295480296, 0.5814271168516304], [140000, 23.733069015079813, 0.5940855952207478], [145000, 23.896466460756738, 0.5944572427481327], [150000, 23.651500408402228, 0.5902329202164721], [155000, 23.563525004781447, 0.5777638520697466], [160000, 23.901119225401903, 0.5907329949925805], [165000, 23.705491004957956, 0.5938850801367785], [170000, 24.012814533184702, 0.5843857657442244], [175000, 24.052252908415596, 0.5892513008249917], [180000, 23.902950287660822, 0.5945418293004688], [185000, 23.802039188679753, 0.5917739770014865], [190000, 23.609445070986897, 0.5827557908136923], [195000, 23.89672066248687, 0.5978993306142255], [200000, 23.617578493030567, 0.583281247279423]]
    # E_lis+=[[a+325000,b,c] for a,b,c in E_lis1]
    E_lis = sorted(E_lis, key=lambda x: x[0])
    # G_lis= sorted(G_lis,key=lambda  x:x[0])
    print("E_lis", E_lis)
    # print("G_lis",G_lis)
    for num, psnr, ssim in E_lis:
        train_info.add_scalar("model/E_psnr", psnr, num)
        train_info.add_scalar("model/E_ssim", ssim, num)

    # for num, psnr, ssim in G_lis:
    #     train_info.add_scalar("model/G_psnr", psnr, num)
    #     train_info.add_scalar("model/G_ssim", ssim, num)
    train_info.close()
    print("done")
